# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BnicNancy
                                 A QGIS plugin
 Ensemble d'outils utilsés par la Brigade Nationale d'Intervention Cadastrale de Nancy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-24
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Marius François-Marchal
        email                : m.francois.marchal@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QFileInfo, QObject, Qt
from qgis.PyQt.QtGui import QIcon, QCursor
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.utils import iface
from qgis.gui import QgsMapToolEmitPoint, QgsMapToolPan
from .SnappingMapTool import SnappingMapToolEmitPoint

import requests
from PyQt5.QtWidgets import QAction, QMessageBox, QApplication, QToolButton, QMenu, QLineEdit, QPushButton
from qgis.core import (QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform,
                       QgsProject,
                       QgsRectangle,
                       QgsPointXY,
                       QgsGeometry,
                       QgsVectorLayer,
                       QgsFeature,
                       Qgis,
                       QgsMapLayerType,
                       QgsPoint,
                       QgsMapLayer,
                       QgsCircularString)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .BnicNancy_dialog import BnicNancyDialog
from .ModifPoint_dialog import ModifPointDialog
from .ListePoint_dialog import ListePointDialog
from .EntrerAttribut_dialog import EntrerAttributDialog
from .ChoisirDebord_dialog import ChoisirDebordDialog

import os.path
import sys
import time
import pyautogui


class BnicNancy:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BnicNancy_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&BnicNancy')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.demarrage=True

        #Toolbar general
        self.toolbar = self.iface.addToolBar("BnicNancy_General")

        #Toolbar point
        self.pointToolbar = self.iface.addToolBar("BnicNancy_Point")

        #Toolbar autres outils
        self.dessinToolbar = self.iface.addToolBar("BnicNancy_Dessin")

        #Toolbar symbole
        self.symboleToolbar = self.iface.addToolBar("Bnicnancy_Symbole")

        #Toolbar entree et zoom
        self.enterToolbar = self.iface.addToolBar("BnicNancy_Entree_Zoom")



        #Widget bouton start
        self.startButt = QPushButton(self.iface.mainWindow())
        self.startButt.setFixedWidth(80)
        self.startButt.setFixedHeight(20)
        self.startButt.setText("START")
        self.rightClicWidget=self.toolbar.addWidget(self.startButt)
        self.rightClicWidget.setToolTip(self.tr('Start'))
        self.startButt.clicked.connect(self.start_function)

        #Widget toolbar texte dernier point
        self.lastPoint = QLineEdit(self.iface.mainWindow())
        self.lastPoint.setFixedWidth(80)
        self.lastPoint.setReadOnly(True)
        self.lastPointWidget=self.pointToolbar.addWidget(self.lastPoint)
        self.lastPointWidget.setToolTip(self.tr('Numéro point'))

        #Bouton deroulant point
        self.toolButton = QToolButton()
        self.toolButton.setMenu(QMenu())
        self.toolButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.toolBtnAction = self.pointToolbar.addWidget(self.toolButton)

        #Bouton deroulant cote
        self.coteButton = QToolButton()
        self.coteButton.setMenu(QMenu())
        self.coteButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.coteButtonAction = self.dessinToolbar.addWidget(self.coteButton)

        #Bouton deroulant ligne
        self.ligneButton = QToolButton()
        self.ligneButton.setMenu(QMenu())
        self.ligneButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.ligneButtonAction = self.dessinToolbar.addWidget(self.ligneButton)

        #Bouton deroulant mur dessin
        self.murButton = QToolButton()
        self.murButton.setMenu(QMenu())
        self.murButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.murButtonAction = self.dessinToolbar.addWidget(self.murButton)

        #Bouton deroulant texte
        self.texteButton = QToolButton()
        self.texteButton.setMenu(QMenu())
        self.texteButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.texteButtonAction = self.dessinToolbar.addWidget(self.texteButton)

        #Bouton deroulant mur symbole
        self.murMitButton = QToolButton()
        self.murMitButton.setMenu(QMenu())
        self.murMitButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.murMitButtonAction = self.symboleToolbar.addWidget(self.murMitButton)

        #Bouton deroulant borne
        self.borneButton = QToolButton()
        self.borneButton.setMenu(QMenu())
        self.borneButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.borneButtonAction = self.symboleToolbar.addWidget(self.borneButton)

        #Widget toolbar clic droit (stop trace polyligne)
        self.rightClic = QPushButton(self.iface.mainWindow())
        self.rightClic.setFixedWidth(151)
        self.rightClic.setFixedHeight(51)
        enterIcon=QIcon(':/plugins/BnicNancy/icon4.png')
        self.rightClic.setIcon(enterIcon)
        self.rightClic.setText("CLIC DROIT")
        self.rightClicWidget=self.enterToolbar.addWidget(self.rightClic)
        self.rightClicWidget.setToolTip(self.tr('Clic droit'))
        self.rightClic.clicked.connect(self.appui_entree)

        #Widget toolbar touche echap
        self.toucheEchap = QPushButton(self.iface.mainWindow())
        self.toucheEchap.setFixedWidth(60)
        self.toucheEchap.setFixedHeight(51)
        self.toucheEchap.setText("Esc")
        self.toucheEchapWidget=self.enterToolbar.addWidget(self.toucheEchap)
        self.toucheEchapWidget.setToolTip(self.tr('Touche ECHAP'))
        self.toucheEchap.clicked.connect(self.appui_echap)


        #Widget toolbar zoom+
        self.bouttonZoomPlus = QPushButton(self.iface.mainWindow())
        self.bouttonZoomPlus.setFixedWidth(60)
        self.bouttonZoomPlus.setFixedHeight(51)
        zoomPlusIcon=QIcon(':/plugins/BnicNancy/icon5.png')
        self.bouttonZoomPlus.setIcon(zoomPlusIcon)
        self.zoomPlusWidget=self.enterToolbar.addWidget(self.bouttonZoomPlus)
        self.zoomPlusWidget.setToolTip(self.tr('Zoom +'))
        self.bouttonZoomPlus.clicked.connect(self.zoom_plus)


        #Widget main
        self.bouttonMain = QPushButton(self.iface.mainWindow())
        self.bouttonMain.setFixedWidth(60)
        self.bouttonMain.setFixedHeight(51)
        mainIcon=QIcon(':/plugins/BnicNancy/icon8.png')
        self.bouttonMain.setIcon(mainIcon)
        self.mainWidget=self.enterToolbar.addWidget(self.bouttonMain)
        self.mainWidget.setToolTip(self.tr('Se déplacer dans la carte'))
        self.bouttonMain.clicked.connect(self.outil_main)



        #Widget toolbar zoom-
        self.bouttonZoomMoins = QPushButton(self.iface.mainWindow())
        self.bouttonZoomMoins.setFixedWidth(60)
        self.bouttonZoomMoins.setFixedHeight(51)
        zoomMoinsIcon=QIcon(':/plugins/BnicNancy/icon6.png')
        self.bouttonZoomMoins.setIcon(zoomMoinsIcon)
        self.zoomMoinsWidget=self.enterToolbar.addWidget(self.bouttonZoomMoins)
        self.zoomMoinsWidget.setToolTip(self.tr('Zoom -'))
        self.bouttonZoomMoins.clicked.connect(self.zoom_moins)


        #num et incrementation initiaux
        self.numPoint=0
        self.increment=1


        #Parametres polyligne
        #attribut sur le segment
        self.attribut = True
        #liste contenant coord points pour polyligne
        self.polyList=[]

        #parametre debordT
        self.debord="0"

        #Outils
        #Tracer point
        self.canvas = self.iface.mapCanvas()
        self.clickTool = SnappingMapToolEmitPoint(self.canvas)

        #Pan (main)
        self.toolPan = QgsMapToolPan(self.canvas)

        #modif point
        self.modifTool=QgsMapToolEmitPoint(self.canvas)

        #delete point
        self.deleteTool = QgsMapToolEmitPoint(self.canvas)

        #tracer segment (2 pts)
        self.segmentTool = SnappingMapToolEmitPoint(self.canvas)

        #tracer arc (3 pts)
        self.arcTool = SnappingMapToolEmitPoint(self.canvas)

        #tracer debord
        self.debordTool = SnappingMapToolEmitPoint(self.canvas)




    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BnicNancy', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        toolbar,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=False,   #Bouton deroulant: on ajoute les 2 actions dans initGui
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        #tracer point
        icon_path = ':/plugins/BnicNancy/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Tracer Point'),
            callback=self.set_point_tool,
            toolbar=self.pointToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_tracer_point=len(self.actions)-1

        #configurer les points
        icon_path2 = ':/plugins/BnicNancy/icon2.png'
        self.add_action(
            icon_path2,
            text=self.tr(u'Configurer points'),
            callback=self.run,
            toolbar=self.pointToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_config_point=len(self.actions)-1

        #Bouton deroulant point
        m = self.toolButton.menu()
        m.addAction(self.actions[self.id_tracer_point])

        self.toolButton.setDefaultAction(self.actions[self.id_tracer_point])   #action par default du bouton
        m.addAction(self.actions[self.id_config_point])


        #Bouton delete object
        icon_path5=':/plugins/BnicNancy/icon9.png'
        self.add_action(
            icon_path5,
            text=self.tr('Supprimer des entités'),
            callback=self.set_delete_tool,
            toolbar=self.toolbar,
            enabled_flag=False,
            add_to_toolbar=True,
            parent=self.iface.mainWindow())

        #Bouton modif object attribute
        icon_path6=':/plugins/BnicNancy/icon10.png'
        self.add_action(
            icon_path6,
            text=self.tr("Modifier l'attribut d'une entité"),
            callback=self.set_modif_tool,
            toolbar=self.toolbar,
            enabled_flag=False,
            add_to_toolbar=True,
            parent=self.iface.mainWindow())


        #bouton sauvegarder toutes les couches
        icon_path3=':/plugins/BnicNancy/icon3.png'
        self.add_action(
            icon_path3,
            text=self.tr('Sauvegarde les couches en mode édition'),
            callback=self.save_layers,
            toolbar=self.toolbar,
            enabled_flag=False,
            add_to_toolbar=True,
            parent=self.iface.mainWindow())


        #bouton annuler dernier point
        icon_path4=':/plugins/BnicNancy/icon7.png'
        self.add_action(
            icon_path4,
            text=self.tr('Annuler'),
            callback=self.cancel,
            toolbar=self.pointToolbar,
            enabled_flag=False,
            add_to_toolbar=True,
            parent=self.iface.mainWindow())

        self.cancel_id=len(self.actions)-1

        #bouton coteSurLigne
        icon_path7=':/plugins/BnicNancy/icon12.png'
        self.add_action(
            icon_path7,
            text=self.tr('Tracer une cote sur ligne'),
            callback=self.set_coteSurLigne_tool,
            toolbar=self.dessinToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_coteSurLigne=len(self.actions)-1

        #bouton coteSansLigne
        icon_path8=':/plugins/BnicNancy/icon11.png'
        self.add_action(
            icon_path8,
            text=self.tr('Tracer une cote sans ligne'),
            callback=self.set_coteSansLigne_tool,
            toolbar=self.dessinToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_coteSansLigne=len(self.actions)-1

        #bouton cote courbe
        icon_path9=':/plugins/BnicNancy/icon13.png'
        self.add_action(
            icon_path9,
            text=self.tr('Tracer une cote courbe'),
            callback=self.set_coteCourbe_tool,
            toolbar=self.dessinToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_coteCourbe=len(self.actions)-1

        #Bouton deroulant cote
        boutonMenuCote = self.coteButton.menu()
        boutonMenuCote.addAction(self.actions[self.id_coteSurLigne])

        self.coteButton.setDefaultAction(self.actions[self.id_coteCourbe])   #action par default du bouton
        boutonMenuCote.addAction(self.actions[self.id_coteSansLigne])
        boutonMenuCote.addAction(self.actions[self.id_coteCourbe])

        #bouton ligne continue
        icon_path10=':/plugins/BnicNancy/icon14.png'
        self.add_action(
            icon_path10,
            text=self.tr('Tracer une ligne continue'),
            callback=self.set_ligneContinue_tool,
            toolbar=self.dessinToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_ligneContinue=len(self.actions)-1

        #bouton ligne discontinue
        icon_path11=':/plugins/BnicNancy/icon15.png'
        self.add_action(
            icon_path11,
            text=self.tr('Tracer une ligne discontinue'),
            callback=self.set_ligneDiscontinue_tool,
            toolbar=self.dessinToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_ligneDiscontinue=len(self.actions)-1

        #Bouton deroulant lignes
        boutonMenuLigne = self.ligneButton.menu()
        boutonMenuLigne.addAction(self.actions[self.id_ligneContinue])

        self.ligneButton.setDefaultAction(self.actions[self.id_ligneContinue])   #action par default du bouton
        boutonMenuLigne.addAction(self.actions[self.id_ligneDiscontinue])

        #bouton Mur Droite
        icon_path12=':/plugins/BnicNancy/icon16.png'
        self.add_action(
            icon_path12,
            text=self.tr('Tracer un mur à droite'),
            callback=self.set_murDroite_tool,
            toolbar=self.dessinToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_murDroite=len(self.actions)-1

        #bouton Mur Milieu
        icon_path13=':/plugins/BnicNancy/icon17.png'
        self.add_action(
            icon_path13,
            text=self.tr('Tracer un mur au milieu'),
            callback=self.set_murMilieu_tool,
            toolbar=self.dessinToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_murMilieu=len(self.actions)-1

        #Bouton deroulant murs
        boutonMenuMur = self.murButton.menu()
        boutonMenuMur.addAction(self.actions[self.id_murDroite])
        self.murButton.setDefaultAction(self.actions[self.id_murDroite])   #action par default du bouton
        boutonMenuMur.addAction(self.actions[self.id_murMilieu])

        #bouton Texte
        icon_path14=':/plugins/BnicNancy/icon18.png'
        self.add_action(
            icon_path14,
            text=self.tr('Tracer un texte'),
            callback=self.set_Texte_tool,
            toolbar=self.dessinToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_texte=len(self.actions)-1

        #bouton TexteOrienté
        icon_path15=':/plugins/BnicNancy/icon19.png'
        self.add_action(
            icon_path15,
            text=self.tr('Tracer un texte orienté'),
            callback=self.set_texteOriente_tool,
            toolbar=self.dessinToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_texteOriente=len(self.actions)-1

        #Bouton deroulant texte
        boutonMenuTexte = self.texteButton.menu()
        boutonMenuTexte.addAction(self.actions[self.id_texte])
        self.texteButton.setDefaultAction(self.actions[self.id_texte])   #action par default du bouton
        boutonMenuTexte.addAction(self.actions[self.id_texteOriente])


        #bouton Debord de toit
        icon_path16=':/plugins/BnicNancy/icon20.png'
        self.add_action(
            icon_path16,
            text=self.tr('Tracer un débord de toit'),
            callback=self.set_debord_tool,
            toolbar=self.symboleToolbar,
            enabled_flag=False,
            add_to_toolbar=True,
            parent=self.iface.mainWindow())

        self.id_debord=len(self.actions)-1


        #bouton 3borne
        icon_path17=':/plugins/BnicNancy/icon21.png'
        self.add_action(
            icon_path17,
            text=self.tr('Tracer une 3borne'),
            callback=self.set_borne3_tool,
            toolbar=self.symboleToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_3borne=len(self.actions)-1

        #bouton borne retrouvee
        icon_path18=':/plugins/BnicNancy/icon22.png'
        self.add_action(
            icon_path18,
            text=self.tr('Tracer une borne retrouvée'),
            callback=self.set_borneRetrouvee_tool,
            toolbar=self.symboleToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_borneRetrouvee=len(self.actions)-1

        #Bouton deroulant borne
        boutonMenuBorne = self.borneButton.menu()
        boutonMenuBorne.addAction(self.actions[self.id_3borne])
        self.borneButton.setDefaultAction(self.actions[self.id_3borne])   #action par default du bouton
        boutonMenuBorne.addAction(self.actions[self.id_borneRetrouvee])


        #bouton mur mitoyen
        icon_path19=':/plugins/BnicNancy/icon23.png'
        self.add_action(
            icon_path19,
            text=self.tr('Tracer un mur mitoyen'),
            callback=self.set_murMitoyen_tool,
            toolbar=self.symboleToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_murMitoyen=len(self.actions)-1

        #bouton mur non mitoyen
        icon_path20=':/plugins/BnicNancy/icon24.png'
        self.add_action(
            icon_path20,
            text=self.tr('Tracer un mur NON mitoyen'),
            callback=self.set_murNonMitoyen_tool,
            toolbar=self.symboleToolbar, #inutile ici
            enabled_flag=False,
            parent=self.iface.mainWindow())

        self.id_murNonMitoyen=len(self.actions)-1

        #Bouton deroulant mur (symbole)
        boutonMenuMurMit = self.murMitButton.menu()
        boutonMenuMurMit.addAction(self.actions[self.id_murMitoyen])
        self.murMitButton.setDefaultAction(self.actions[self.id_murMitoyen])   #action par default du bouton
        boutonMenuMurMit.addAction(self.actions[self.id_murNonMitoyen])


        #bouton cloture
        icon_path21=':/plugins/BnicNancy/icon25.png'
        self.add_action(
            icon_path21,
            text=self.tr('Tracer une clôture'),
            callback=self.set_cloture_tool,
            toolbar=self.symboleToolbar,
            enabled_flag=False,
            add_to_toolbar=True,
            parent=self.iface.mainWindow())

        self.id_cloture=len(self.actions)-1

        #bouton biffer
        icon_path22=':/plugins/BnicNancy/icon26.png'
        self.add_action(
            icon_path22,
            text=self.tr('Tracer un biffer'),
            callback=self.set_biffer_tool,
            toolbar=self.symboleToolbar,
            enabled_flag=False,
            add_to_toolbar=True,
            parent=self.iface.mainWindow())

        self.id_biffer=len(self.actions)-1

        #bouton image
        icon_path23=':/plugins/BnicNancy/icon27.png'
        self.add_action(
            icon_path23,
            text=self.tr('Placer une image'),
            callback=self.set_image_tool,
            toolbar=self.symboleToolbar,
            enabled_flag=False,
            add_to_toolbar=True,
            parent=self.iface.mainWindow())

        self.id_image=len(self.actions)-1


        # will be set False in run()
        self.first_start = True

        #connexion a display_point pour tracer un point
        self.clickTool.snapClicked.connect(self.display_point)

        self.modifTool.canvasClicked.connect(self.modify_attribute)

        self.deleteTool.canvasClicked.connect(self.delete_object)

        self.segmentTool.snapClicked.connect(self.display_segment)

        self.arcTool.snapClicked.connect(self.display_cote_courbe)

        self.debordTool.snapClicked.connect(self.display_debord)


        #verifie la bonne connexion
        #QMessageBox.information(   self.iface.mainWindow(),"Info", "connect = %s"%str(result) )



    #Bouton start
    def start_function(self):

        #couche point
        # layersP=QgsProject.instance().mapLayersByName("Point")

        #couche coteSurLigne
        # layersCsurL=QgsProject.instance().mapLayersByName("coteSURLigne")

        #couche cotesansligne
        # layersCsansL=QgsProject.instance().mapLayersByName("cotesansligne")




        try:
            #layer = QgsVectorLayer(prjfi.absolutePath()+"/point.shp", "point", "ogr")
            self.layerPoint=QgsProject.instance().mapLayersByName("Point")[0]
        except:
            self.iface.messageBar().pushMessage("La couche point n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerCoteSurLigne=QgsProject.instance().mapLayersByName("coteSURLigne")[0]
        except:
            self.iface.messageBar().pushMessage("La couche coteSURLigne n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerCoteSansLigne=QgsProject.instance().mapLayersByName("cotesansligne")[0]
        except:
            self.iface.messageBar().pushMessage("La couche cotesansligne n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerLigneContinue=QgsProject.instance().mapLayersByName("LigneContinue")[0]
        except:
            self.iface.messageBar().pushMessage("La couche LigneContinue n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerLigneDiscontinue=QgsProject.instance().mapLayersByName("LigneDiscontinue")[0]
        except:
            self.iface.messageBar().pushMessage("La couche LigneDiscontinue n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layer3Borne=QgsProject.instance().mapLayersByName("3borne")[0]
        except:
            self.iface.messageBar().pushMessage("La couche 3borne n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerCloture=QgsProject.instance().mapLayersByName("cloture")[0]
        except:
            self.iface.messageBar().pushMessage("La couche cloture n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerMurMitoyen=QgsProject.instance().mapLayersByName("murmitoyen")[0]
        except:
            self.iface.messageBar().pushMessage("La couche murmitoyen n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerMurNonMitoyen=QgsProject.instance().mapLayersByName("murnonmi")[0]
        except:
            self.iface.messageBar().pushMessage("La couche murnonmi n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerBorneRetrouvee=QgsProject.instance().mapLayersByName("borne_retrouvée")[0]
        except:
            self.iface.messageBar().pushMessage("La couche borne_retrouvée n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerBiffer=QgsProject.instance().mapLayersByName("biffer")[0]
        except:
            self.iface.messageBar().pushMessage("La couche biffer n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerMurDroite=QgsProject.instance().mapLayersByName("MurDroite")[0]
        except:
            self.iface.messageBar().pushMessage("La couche MurDroite n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerTexte=QgsProject.instance().mapLayersByName("Texte")[0]
        except:
            self.iface.messageBar().pushMessage("La couche Texte n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerTexteOriente=QgsProject.instance().mapLayersByName("TexteOriente")[0]
        except:
            self.iface.messageBar().pushMessage("La couche TexteOrienté n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerMurMilieu=QgsProject.instance().mapLayersByName("MurMilieu")[0]
        except:
            self.iface.messageBar().pushMessage("La couche MurMilieu n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerImage=QgsProject.instance().mapLayersByName("image")[0]
        except:
            self.iface.messageBar().pushMessage("La couche image n'existe pas",level=Qgis.Critical, duration=3)

        try:
            self.layerDebord=QgsProject.instance().mapLayersByName("debordT")[0]
        except:
            self.iface.messageBar().pushMessage("La couche debordT n'existe pas",level=Qgis.Critical, duration=3)

        self.currentLayer=self.iface.activeLayer()


        #initialisation widget texte dernier point

        #construit liste id points
        listFeatures=[]
        for feature in self.layerPoint.getFeatures():
            listFeatures.append(feature.id())

        self.numPoint=self.layerPoint.getFeature(max(listFeatures)).attributes()[0]+1
        self.lastPoint.setText(str(self.numPoint))

        #activer tous les boutons (sauf annuler)
        for i in range(len(self.actions)):
            if i!=self.cancel_id:
                self.actions[i].setEnabled(True)

        #desactiver bouton start
        self.startButt.setEnabled(False)





    #Tracer point
    def set_point_tool(self):
        self.currentLayer = self.layerPoint
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.canvas.setMapTool(self.clickTool)

    def display_point(self,point,button):

        feat = QgsFeature()
        feat.setAttributes([self.numPoint])
        feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(point.x(),point.y())))
        self.currentLayer.dataProvider().addFeatures([feat])    #ajout du point sur le dessin #ne permet pas ctrl z

        self.currentLayer.commitChanges()

        #autoriser annulation
        self.actions[self.cancel_id].setEnabled(True)

        #actualisation num suivant

        self.numPoint+=self.increment
        self.lastPoint.setText(str(self.numPoint))

        self.refresh_layer(self.currentLayer)


    #erase last displayed point
    def cancel(self):

        lastFeatureId = -1

        # Loop through all features in the layer
        for f in self.layerPoint.getFeatures():
            if f.id() > lastFeatureId:
                lastFeatureId = f.id()

        if lastFeatureId >= 0:
            self.layerPoint.dataProvider().deleteFeatures([lastFeatureId])
            self.refresh_layer(self.layerPoint)
            self.numPoint=self.numPoint-self.increment
            self.lastPoint.setText(str(self.numPoint))

        #aucun point dans la couche
        else:
            self.actions[self.cancel_id].setEnabled(False)




    #Tracer cote
    def set_coteSurLigne_tool(self):
        self.currentLayer = self.layerCoteSurLigne
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.attribut = True
        self.canvas.setMapTool(self.segmentTool)

    def set_coteSansLigne_tool(self):
        self.currentLayer = self.layerCoteSansLigne
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.attribut = True
        self.canvas.setMapTool(self.segmentTool)

    def display_segment(self, point, button):

        #1er point
        if len(self.polyList)==0:
            pt=QgsPoint(point.x(),point.y())
            self.polyList.append(pt)

        #2e point
        else:

            feat = QgsFeature()
            feat.setGeometry(QgsGeometry.fromPolyline([self.polyList[0], QgsPoint(point.x(),point.y())]))
            self.currentLayer.dataProvider().addFeatures([feat])
            self.refresh_layer(self.currentLayer)
            self.polyList=[]
            self.currentLayer.commitChanges()

            if self.attribut:
                for feature in self.currentLayer.getFeatures():
                    ft=feature

                #fenetre entrer cote
                self.dlgAttribut = EntrerAttributDialog()
                self.dlgAttribut.show()
                self.dlgAttribut.setFixedSize(368, 116)


                result = self.dlgAttribut.exec_()
                # See if OK was pressed
                if result:
                    try:
                        newValue=self.dlgAttribut.lineedit_attribut.value()
                        print(newValue)

                        attrs = {0 : newValue}
                        self.currentLayer.dataProvider().changeAttributeValues({ ft.id() : attrs })
                        self.refresh_layer(self.currentLayer)
                        self.dlgAttribut.lineedit_attribut.clearValue()

                    except:
                        pass
                else:
                    self.currentLayer.dataProvider().deleteFeatures([ft.id()])
                    self.refresh_layer(self.currentLayer)


    def set_coteCourbe_tool(self):
        self.currentLayer = self.layerCoteSurLigne
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        #self.iface.actionAddFeature().trigger()
        self.canvas.setMapTool(self.arcTool)


    def display_cote_courbe(self, point, button):

        #1er et 2e point
        if len(self.polyList)<2:
            pt=QgsPoint(point.x(),point.y())
            self.polyList.append(pt)

        #3e point
        else:

            # Create a QgsCircularString
            circularRing = QgsCircularString()
            # Set first point, intermediate point for curvature and end point
            circularRing.setPoints([
                self.polyList[0],
                self.polyList[1],
                QgsPoint(point.x(),point.y())]
            )

            # Create geometry using the instance of QgsCircularString
            geom_from_curve = QgsGeometry(circularRing)

            # Create a feature
            fet = QgsFeature()
            # Assign the geometry
            fet.setGeometry(geom_from_curve)

            self.currentLayer.dataProvider().addFeatures([fet])
            self.refresh_layer(self.currentLayer)
            self.polyList=[]
            self.currentLayer.commitChanges()

            for feature in self.currentLayer.getFeatures():
                ft=feature


            #fenetre entrer cote
            self.dlgAttribut = EntrerAttributDialog()
            self.dlgAttribut.show()
            self.dlgAttribut.setFixedSize(368, 116)


            result = self.dlgAttribut.exec_()
            # See if OK was pressed
            if result:
                try:
                    newValue=self.dlgAttribut.lineedit_attribut.value()
                    print(newValue)

                    attrs = {0 : newValue}
                    self.currentLayer.dataProvider().changeAttributeValues({ ft.id() : attrs })
                    self.refresh_layer(self.currentLayer)
                    self.dlgAttribut.lineedit_attribut.clearValue()

                except:
                    pass
            else:
                self.currentLayer.dataProvider().deleteFeatures([ft.id()])
                self.refresh_layer(self.currentLayer)




    def appui_entree(self):
        pyautogui.moveTo(800, 400)
        pyautogui.click(button='right')

    def appui_echap(self):
        pyautogui.moveTo(800, 400)
        pyautogui.click(button='left')
        #pyautogui.press('tab', presses=4)
        pyautogui.press('esc')

        #self.canvas.setMapTool(self.toolPan)

    def zoom_plus(self):
        self.canvas.zoomIn()

    def zoom_moins(self):
        self.canvas.zoomOut()

    def outil_main(self):
        self.canvas.setMapTool(self.toolPan)


    #suppression objet
    def set_delete_tool(self):
        self.canvas.setMapTool(self.deleteTool)
        self.canvas.setCursor(QCursor(Qt.PointingHandCursor))

    def delete_object(self, point, button):
        #self.dlgModif.reject() #ferme la fenetre
        self.save_layers()

        self.select_nearest_feature(point, button)

        self.currentLayer.dataProvider().deleteFeatures([self.closestFeatureId])

        self.currentLayer.removeSelection()
        self.refresh_layer(self.currentLayer)

        #self.canvas.setMapTool(self.toolPan)

        #maj plus grand point
        # self.max_Point()
        # self.lastPoint.setText(str(self.pointmax))



    #Modify attributes
    def set_modif_tool(self):
        #self.dlg.reject()   #ferme la fenetre
        self.canvas.setMapTool(self.modifTool)
        self.canvas.setCursor(QCursor(Qt.PointingHandCursor))

    def modify_attribute(self,point, button ):
        self.save_layers()

        self.select_nearest_feature(point, button)

        self.dlgModif = ModifPointDialog()
        self.dlgModif.show()
        self.dlgModif.setFixedSize(368, 116)


        result = self.dlgModif.exec_()
        # See if OK was pressed
        if result:
            try:

                newValue=self.dlgModif.lineedit_newNum.value()

                typeName=self.currentLayer.fields()[0].typeName()
                if  typeName == "Integer54" or typeName == "Integer":
                    newValue=int(newValue)
                attrs = {0 : newValue}
                self.currentLayer.dataProvider().changeAttributeValues({ self.closestFeatureId : attrs })
                self.currentLayer.removeSelection()
                self.refresh_layer(self.currentLayer)
                #self.max_Point()
                #self.lastPoint.setText(str(self.pointmax))

                #self.canvas.setMapTool(self.toolPan)
            except:
                pass

        self.currentLayer.removeSelection()
        #efface le texte des lineEdit
        self.dlgModif.lineedit_newNum.clearValue()



    def set_ligneContinue_tool(self):
        self.currentLayer = self.layerLigneContinue
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()

    def set_ligneDiscontinue_tool(self):
        self.currentLayer = self.layerLigneDiscontinue
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()

    def set_murDroite_tool(self):
        self.currentLayer = self.layerMurDroite
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()

    def set_murMilieu_tool(self):
        self.currentLayer = self.layerMurMilieu
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()

    def set_Texte_tool(self):
        self.currentLayer = self.layerTexte
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()

    def set_texteOriente_tool(self):
        self.currentLayer = self.layerTexteOriente
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.attribut = True
        self.canvas.setMapTool(self.segmentTool)

    def set_debord_tool(self):

        self.currentLayer = self.layerDebord
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.canvas.setMapTool(self.debordTool)

        self.dlgDebord = ChoisirDebordDialog()
        self.dlgDebord.show()
        self.dlgDebord.setFixedSize(854, 155)


        self.dlgDebord.pushButton_0.clicked.connect(self.set_debord0)
        self.dlgDebord.pushButton_10.clicked.connect(self.set_debord10)
        self.dlgDebord.pushButton_20.clicked.connect(self.set_debord20)
        self.dlgDebord.pushButton_30.clicked.connect(self.set_debord30)
        self.dlgDebord.pushButton_40.clicked.connect(self.set_debord40)
        self.dlgDebord.pushButton_50.clicked.connect(self.set_debord50)
        self.dlgDebord.pushButton_60.clicked.connect(self.set_debord60)
        self.dlgDebord.pushButton_70.clicked.connect(self.set_debord70)
        self.dlgDebord.pushButton_80.clicked.connect(self.set_debord80)
        self.dlgDebord.pushButton_90.clicked.connect(self.set_debord90)

        result = self.dlgDebord.exec_()
        # See if OK was pressed
        if result:
            try:
                self.debord=self.dlgDebord.lineedit_debord.value()
                print(self.debord)
            except:
                pass
        self.dlgDebord.lineedit_debord.clearValue()


    def set_debord0(self):
        self.debord="0"
        self.dlgDebord.reject()
    def set_debord10(self):
        self.debord="10"
        self.dlgDebord.reject()
    def set_debord20(self):
        self.debord="20"
        self.dlgDebord.reject()
    def set_debord30(self):
        self.debord="30"
        self.dlgDebord.reject()
    def set_debord40(self):
        self.debord="40"
        self.dlgDebord.reject()
    def set_debord50(self):
        self.debord="50"
        self.dlgDebord.reject()
    def set_debord60(self):
        self.debord="60"
        self.dlgDebord.reject()
    def set_debord70(self):
        self.debord="70"
        self.dlgDebord.reject()
    def set_debord80(self):
        self.debord="80"
        self.dlgDebord.reject()
    def set_debord90(self):
        self.debord="90"
        self.dlgDebord.reject()


    def display_debord(self,point,button):

        feat = QgsFeature()
        feat.setAttributes([self.debord])
        feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(point.x(),point.y())))
        self.currentLayer.dataProvider().addFeatures([feat])    #ajout du point sur le dessin #ne permet pas ctrl z

        self.currentLayer.commitChanges()
        self.refresh_layer(self.currentLayer)


    def set_borne3_tool(self):
        self.currentLayer = self.layer3Borne
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()

    def set_borneRetrouvee_tool(self):
        self.currentLayer = self.layerBorneRetrouvee
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()

    def set_murMitoyen_tool(self):
        self.currentLayer = self.layerMurMitoyen
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.attribut = False
        self.canvas.setMapTool(self.segmentTool)

    def set_murNonMitoyen_tool(self):
        self.currentLayer = self.layerMurNonMitoyen
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.attribut = False
        self.canvas.setMapTool(self.segmentTool)

    def set_cloture_tool(self):
        self.currentLayer = self.layerCloture
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()

    def set_biffer_tool(self):
        self.currentLayer = self.layerBiffer
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.attribut = False
        self.canvas.setMapTool(self.segmentTool)

    def set_image_tool(self):
        self.currentLayer = self.layerImage
        self.iface.setActiveLayer(self.currentLayer)
        self.currentLayer.startEditing()
        self.iface.actionAddFeature().trigger()


    #Compute the highest point attribute
    def max_Point(self):

        features = self.layerPoint.getFeatures()
        attributs=[]

        for feature in features:
            att=feature.attributes()
            attributs.append(int(att[0]))
            #print("Feature attribut: ", att[0])

        try:
            self.pointmax=max(attributs)
        except:
            self.pointmax=0



    def save_layers(self):
        #layer.commitChanges(): quitte edition en sauvegardant
        #layer.rollBack() : quitte edition sans sauvegarder

        #active l'outil main
        #self.canvas.setMapTool(self.toolPan)

        #pyautogui.press('esc')

        #sauvegarde toutes les couches en mode edition
        for layer in self.iface.mapCanvas().layers():
            if layer.isEditable():
                layer.commitChanges()
                layer.startEditing()    #on remet la couche en mode edition




    def select_nearest_feature(self, point, button):
        layerData = []

        for layer in self.canvas.layers():

            if layer.type() != QgsMapLayer.VectorLayer:
                # Ignore this layer as it's not a vector
                continue

            if layer.featureCount() == 0:
                # There are no features - skip
                continue

            groupName = QgsProject.instance().layerTreeRoot().findLayer(layer.id()).parent().name()
            #features you cannot select
            if groupName == "Restit" or groupName == "CroqRem" or groupName == "Ancien_Plan" or groupName == "Ortho":
                continue


            layer.removeSelection()

            # Determine the location of the click in real-world coords
            #layerPoint = self.toLayerCoordinates( layer, mouseEvent.pos() )


            shortestDistance = float("inf")
            self.closestFeatureId = -1

            # Loop through all features in the layer
            for f in layer.getFeatures():
                dist = f.geometry().distance( QgsGeometry.fromPointXY(QgsPointXY(point.x(),point.y())))
                if dist < shortestDistance and dist>0:
                    shortestDistance = dist
                    self.closestFeatureId = f.id()

            info = (layer, self.closestFeatureId, shortestDistance)
            layerData.append(info)



        if not len(layerData) > 0:
            # Looks like no vector layers were found - do nothing
            self.iface.messageBar().pushMessage("Aucun objet trouvé",level=Qgis.Critical, duration=3)
            return

        # Sort the layer information by shortest distance
        layerData.sort( key=lambda element: element[2] )

        if layerData[0][2]>5:
            # Looks like no close elements were found - do nothing
            self.iface.messageBar().pushMessage("Aucun objet trouvé",level=Qgis.Critical, duration=3)
            return

        else:
            # Select the closest feature
            layerWithClosestFeature, self.closestFeatureId, shortestDistance = layerData[0]
            layerWithClosestFeature.select( self.closestFeatureId )
            self.currentLayer=layerWithClosestFeature



    #refresh canvas
    def refresh_layer(self,layer):

        self.canvas.refresh()
        layer.triggerRepaint()


    def afficher_liste_point(self):

        self.dlgListe = ListePointDialog()
        self.dlgListe.show()
        self.dlgListe.setFixedSize(275, 439)


        #remplit liste de points

        listPoint=[]
        listFeatures=[]
        for feature in self.layerPoint.getFeatures():
            listPoint.append(feature.attributes()[0])
            listFeatures.append(feature.id())
        listPoint.sort(reverse=True)


        self.dlgListe.listNumPoint.setRowCount(0)
        for i in range(len(listPoint)):
            self.dlgListe.listNumPoint.insertRow(i)
            self.dlgListe.listNumPoint.setCellWidget(i, 0, QLineEdit(str(listPoint[i])))



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&BnicNancy'),
                action)
            #self.iface.removeToolBarIcon(action)

        #self.iface.removeToolBarIcon(self.toolBtnAction)
        self.toolbar.clear()
        parent = self.toolbar.parentWidget()
        parent.removeToolBar(self.toolbar)

        self.pointToolbar.clear()
        parent = self.pointToolbar.parentWidget()
        parent.removeToolBar(self.pointToolbar)

        self.enterToolbar.clear()
        parent2=self.enterToolbar.parentWidget()
        parent2.removeToolBar(self.enterToolbar)

        self.dessinToolbar.clear()
        parent3=self.dessinToolbar.parentWidget()
        parent3.removeToolBar(self.dessinToolbar)

        self.symboleToolbar.clear()
        parent4=self.symboleToolbar.parentWidget()
        parent4.removeToolBar(self.symboleToolbar)

        self.iface.removeToolBarIcon(self.toolBtnAction)
        self.iface.removeToolBarIcon(self.coteButtonAction)
        self.iface.removeToolBarIcon(self.murButtonAction)
        self.iface.removeToolBarIcon(self.ligneButtonAction)
        self.iface.removeToolBarIcon(self.texteButtonAction)
        self.iface.removeToolBarIcon(self.murMitButtonAction)
        self.iface.removeToolBarIcon(self.borneButtonAction)

        self.canvas.unsetMapTool(self.modifTool)
        self.canvas.unsetMapTool(self.clickTool)
        self.canvas.unsetMapTool(self.segmentTool)
        self.canvas.unsetMapTool(self.deleteTool)
        self.canvas.unsetMapTool(self.arcTool)
        self.canvas.unsetMapTool(self.debordTool)




    def run(self):

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = BnicNancyDialog()

        #self.dlg.button_para.clicked.connect(self.open_style_point)

        # show the dialog
        self.dlg.show()

        #empeche redimensionnement fenetre
        self.dlg.setFixedSize(477, 161)

        #remplit la zone de texte avec le point max
        self.max_Point()

        self.dlg.lineedit_numac.setReadOnly(True)
        self.dlg.lineedit_numac.setText(str(self.pointmax))
        #self.lastPoint.setText(str(self.pointmax))

        self.dlg.button_listePoint.clicked.connect(self.afficher_liste_point)


        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed

        if result:

            try:
                self.numPoint = int(self.dlg.lineedit_numin.value())
                #self.lastPoint.setText(str(self.numPoint))

            except:
                pass

            try:
                inc=self.increment
                self.increment=int(self.dlg.lineedit_inc.value())
                self.numPoint=self.numPoint-inc
                self.numPoint=self.numPoint+self.increment
                #self.lastPoint.setText(str(self.numPoint))

            except:
                pass

            self.lastPoint.setText(str(self.numPoint))


            #self.dlg.button_para.clicked.copyColor()


        #efface le texte des lineEdit
        self.dlg.lineedit_numin.clearValue()
        self.dlg.lineedit_inc.clearValue()
